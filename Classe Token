#include "token.hpp"
#include <iostream>
#include <cstring>
#include <string>
#include <sstream>
#include <stdlib.h>

using namespace std;

token::token()
{
	x=0;
	aux=1;
	s='0';
}

token::token(int i)
{
	x=i;
	aux=1;
	stringstream a1;
	a1<<x<<endl;
	s=a1.str();
}

token::token(bool B)
{
	b=B;
	if(b==true) s='T';
	else s='F';
	aux=2;
}

token::token(string S)
{
	s=S;
	aux=3;
	if(S=="T"){ b=true; aux=2;}
	else if(S=="F"){ b=false; aux=2;}
	else if(S[0]=='0' or S[0]=='1' or S[0]=='2' or S[0]=='3' or S[0]=='4' or S[0]=='5' or S[0]=='6' or S[0]=='7' or S[0]=='8' or S[0]=='9'){aux=1; x=stoi(s);}
	else if(S[0]=='-'){if(S[1]=='0' or S[1]=='1' or S[1]=='2' or S[1]=='3' or S[1]=='4' or S[1]=='5' or S[1]=='6' or S[1]=='7' or S[1]=='8' or S[1]=='9'){aux=1; x=stoi(s);}}
	
	
}

token::token(const char s[])
{	
	for(int i=0;i<strlen(s);i++) a[i]=s[i];
	aux=4;
}

token::token(const token &t)
{
	x=t.x;
	b=t.b;
	s=t.s;
	for(int i=0;i<strlen(t.a);i++) a[i]=t.a[i];
}

token& token::operator=(const token &e)
{
	this->x=e.x;
	this->b=e.b;
	this->s=e.s;
	this->aux=e.aux;
return (*this);	
}

token::~token()
{}

bool token::es_operador_unari() const
{
	bool b1=false;
	if(aux==3){
		if(s=="not") b1=true;
	}	
return b1;
}

bool token::es_operador_binari() const
{
	bool b1;
	if(s=="and" or s=="or" or s=="==" or s=="!=" or s=="+" or s=="-" or s=="*" or s=="/" or s=="%" or s=="**") b1=true;
	else b1=false;
return b1;
}

bool token::es_operador_commutatiu() const
{
	bool b1;
	if(s=="*" or s=="+" or s=="and" or s=="or" or s=="==" or s=="!=")b1=true;
	else b1=false;	
	return b1;
}

bool token::es_boolea() const
{
	bool b1=false;
	if(aux==2){
		b1=true;
	}	
	return b1;
}

bool token::es_enter()	const
{
	bool b1=false;
	if(aux==1){
		b1=true;
	}	
	return b1;
	
}

bool token::es_variable() const
{
	/*per que sigui una variable ha de ser: enter, char, bool or string */
	bool b1=false;
	
	if (s=="or" or s=="and" or s=="not")b1=false;
	else if(s[0]>='a' and s[0]<='z') b1=true;
			
return b1;
}

pair<int, bool> token::prioritat() const
{	
	int y=8;
	bool b1=true;
	if(s=="**"){ y=7;b1=false;}
	if(s=="*" or s=="/" or s=="%"){ y=6;b1=true;}
	if(s=="+" or s=="-"){ y=5;b1=true;}
	if(s=="==" or s=="!="){ y=4;b1=true;}
	if(s=="not"){y=3;b1=false;}
	if(s=="and"){y=2;b1=true;}
	if(s=="or"){y=1;b1=true;}

return make_pair(y,b1);
}

int token::to_int() const
{
	return x;
	

}

bool token::to_bool() const
    
// Pre:  El p.i. és un token booleà
    // Post: Retorna el valor booleà true o false del p.i.
{
	return b;
	
}
    string token::to_string() const
    // Pre: true
    // Post: Retorna el valor del p.i. convertit en string
{
	return s;
	
}
    bool token::operator==(const token &t) const
    // Pre: t = TK
    // Post: Indica si el token del p.i. és igual al token TK
{
	bool b1=false;
 	if(x==t.x and aux==1 and t.aux==1)b1=true;
	if(b==t.b and aux==2 and t.aux==2)b1=true;
	if(s==t.s and aux==3 and t.aux==3)b1=true;
	if(a==t.a and aux==4 and t.aux==4)b1=true;
	if(aux==3 and t.aux==4){b1=true; for(int i=0;i<s.size();i++) if(s[i]!=a[i]) b1=false;}
	if(aux==4 and t.aux==3){b1=true; for(int i=0;i<s.size();i++) if(s[i]!=a[i]) b1=false;}
	return b1;
}

    bool token::operator!=(const token &t) const
    // Pre: t = TK
    // Post: Indica si el token del p.i. és diferent al token TK
{
	bool b1=false;
 	if(x!=t.x and aux==1 and t.aux==1)b1=true;
	if(b!=t.b and aux==2 and t.aux==2)b1=true;
	if(s!=t.s and aux==3 and t.aux==3)b1=true;
	if(a!=t.a and aux==4 and t.aux==4)b1=true;
	if(aux==3 and t.aux==4){b1=true; for(int i=0;i<s.size();i++) if(s[i]==a[i]) b1=false;}
	if(aux==4 and t.aux==3){b1=true; for(int i=0;i<s.size();i++) if(s[i]==a[i]) b1=false;}
	if(aux!=t.aux) b1=true;
	return b1;
}
    istream& operator>>(istream& is, token &t)
    // Pre: El canal is conté un string amb un contingut d'un token TK
    // Post: t = TK
{
	is>>t.s;
	return is;
}
    ostream& operator<<(ostream& os, const token &t)
    // Pre: t = TK
    // Post: S'ha escrit al canal os el contingut del token TK
{
	if(t.aux==1)os<<t.x;
	if(t.aux==2){ 
		if(t.b==true)os<<"T"; 
		else os<<"F";
	}
	if(t.aux==3)os<<t.s;
	if(t.aux==4)for(int i=0;i<strlen(t.a);i++) os<<t.a[i];
	return os;
}


